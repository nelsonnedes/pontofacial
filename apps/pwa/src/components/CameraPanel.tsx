'use client';

import React, { useRef, useEffect, useState, useCallback, useMemo } from 'react';
import { useFaceAPIStatus } from './FaceAPIProvider';
import { faceRecognition } from '@/lib/face-recognition';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Camera, CameraOff, AlertCircle, CheckCircle, Loader2 } from 'lucide-react';

// Removido require din√¢mico: usar import est√°tico do servi√ßo singleton

// Tipos e interfaces
interface CameraPanelState {
  isActive: boolean;
  stream: MediaStream | null;
  faceDetected: boolean;
  faceCount: number;
  error: string | null;
  videoDimensions: { width: number; height: number };
  isInitializingFaceAPI: boolean;
}

// Configura√ß√µes de c√¢mera otimizadas
const CAMERA_CONSTRAINTS = {
  video: {
    width: { ideal: 640, max: 1280 },
    height: { ideal: 480, max: 720 },
    facingMode: 'user',
    frameRate: { ideal: 15, max: 30 }
  },
  audio: false
} as const;

const DETECTION_INTERVAL = 1000; // 1 segundo
const STABILIZATION_TIMEOUT = 5000; // 5 segundos

interface CameraPanelProps {
  onPhotoCapture?: (blob: Blob, imageData: ImageData, faceEmbedding?: FaceEmbedding) => void;
  onError?: (error: string) => void;
  onFaceDetected?: (faceCount: number) => void;
  className?: string;
  showPreview?: boolean;
  autoStart?: boolean;
  enableFaceDetection?: boolean;
  requireFace?: boolean;
}

export default function CameraPanel({ 
  onPhotoCapture, 
  onError, 
  onFaceDetected,
  className = '', 
  showPreview = true, 
  autoStart = false,
  enableFaceDetection = true, // Habilitado por padr√£o
  requireFace = false
}: CameraPanelProps) {
  const [isCapturing, setIsCapturing] = useState(false);
  
  // Estado consolidado
  const [state, setState] = useState<CameraPanelState>({
    isActive: false,
    stream: null,
    faceDetected: false,
    faceCount: 0,
    error: null,
    videoDimensions: { width: 0, height: 0 },
    isInitializingFaceAPI: false
  });
  
  // Hook para status do Face API
  const { initialized: faceAPIReady, initializing: faceAPILoading, error: faceAPIError } = useFaceAPIStatus();
  
  // Fun√ß√£o para atualizar estado
  const updateState = useCallback((updates: Partial<CameraPanelState>) => {
    setState(prev => ({ ...prev, ...updates }));
  }, []);
  
  // Destructuring do estado para compatibilidade
  const { isActive, stream, faceDetected, faceCount, error, videoDimensions, isInitializingFaceAPI } = state;
  
  // Logs de debug para verificar status do Face API
  useEffect(() => {
    console.log('üîç Status do Face API:', {
      isInitialized: faceAPIReady,
      isInitializing: faceAPILoading,
      error: faceAPIError,
      enableFaceDetection
    });
  }, [faceAPIReady, faceAPILoading, faceAPIError, enableFaceDetection]);
  
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // Configura√ß√µes da c√¢mera otimizadas
  const videoConstraints = {
    width: { ideal: 1280, min: 640 },
    height: { ideal: 720, min: 480 },
    facingMode: 'user', // C√¢mera frontal
    frameRate: { ideal: 30, min: 15 },
    aspectRatio: { ideal: 16/9 }
  };

  // Verificar dispositivos de c√¢mera dispon√≠veis
  const checkCameraDevices = async () => {
    try {
      const devices = await navigator.mediaDevices.enumerateDevices();
      const videoDevices = devices.filter(d => d.kind === 'videoinput');
      
      console.log('üìπ Dispositivos de c√¢mera dispon√≠veis:');
      console.table(videoDevices);
      
      if (videoDevices.length === 0) {
        throw new Error('Nenhuma c√¢mera encontrada no dispositivo');
      }
      
      return videoDevices;
    } catch (error) {
      console.error('‚ùå Erro ao verificar dispositivos de c√¢mera:', error);
      throw error;
    }
  };

  // Fun√ß√£o auxiliar para obter mensagem de erro
  const getErrorMessage = useCallback((err: any) => {
    return err.name === 'NotAllowedError' 
      ? 'Acesso √† c√¢mera negado. Por favor, permita o acesso e tente novamente.'
      : err.name === 'NotFoundError'
      ? 'Nenhuma c√¢mera encontrada no dispositivo.'
      : err.name === 'NotReadableError'
      ? 'C√¢mera est√° sendo usada por outro aplicativo.'
      : `Erro ao acessar c√¢mera: ${err.message}`;
  }, []);

  // Fun√ß√£o auxiliar para aguardar estabiliza√ß√£o do v√≠deo
  const waitForVideoStabilization = useCallback(async (video: HTMLVideoElement, mediaStream: MediaStream) => {
    if (video.videoWidth === 0 || video.videoHeight === 0) {
      console.log('‚è≥ Aguardando estabiliza√ß√£o do v√≠deo...');
      
      let attempts = 0;
      const maxAttempts = 10;
      
      while (attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 500));
        
        if (video.videoWidth > 0 && video.videoHeight > 0 && video.readyState >= 2) {
          updateState({
            videoDimensions: {
              width: video.videoWidth,
              height: video.videoHeight
            }
          });
          console.log(`‚úÖ C√¢mera estabilizada: ${video.videoWidth}x${video.videoHeight}, readyState: ${video.readyState}`);
          
          if (mediaStream.active) {
            console.log('‚úÖ Stream de m√≠dia ativo e funcionando');
            break;
          } else {
            throw new Error('Stream de m√≠dia foi desativado durante a inicializa√ß√£o');
          }
        }
        
        attempts++;
        console.log(`üîÑ Aguardando estabiliza√ß√£o... tentativa ${attempts}/${maxAttempts}`);
      }
      
      if (attempts >= maxAttempts) {
        throw new Error('Timeout: C√¢mera n√£o conseguiu estabilizar ap√≥s m√∫ltiplas tentativas');
      }
    }
  }, [updateState]);

  // Iniciar c√¢mera com configura√ß√µes otimizadas
  const startCamera = useCallback(async () => {
    try {
      console.log('üé• Iniciando c√¢mera...');
      updateState({ error: null, isInitializingFaceAPI: true });
      
      // Verificar se estamos no lado do cliente
      if (typeof window === 'undefined') {
        throw new Error('C√¢mera n√£o dispon√≠vel durante o build');
      }
      
      // Verificar suporte do navegador
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('Seu navegador n√£o suporta acesso √† c√¢mera');
      }
      
      // Verificar dispositivos de c√¢mera dispon√≠veis
      const cameraDevices = await checkCameraDevices();
      console.log(`üìπ ${cameraDevices.length} dispositivo(s) de c√¢mera encontrado(s)`);
      
      // Verificar se j√° h√° uma c√¢mera ativa
      if (state.stream && state.stream.active) {
        console.log('üîÑ C√¢mera j√° est√° ativa, parando stream anterior...');
        stopCamera();
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      console.log('üì± Solicitando acesso √† c√¢mera com constraints:', CAMERA_CONSTRAINTS);
      let mediaStream: MediaStream | null = null;
      try {
        mediaStream = await navigator.mediaDevices.getUserMedia(CAMERA_CONSTRAINTS);
      } catch (primaryErr: any) {
        console.warn('‚ö†Ô∏è Falha com constraints prim√°rias, tentando fallback iOS/Safari:', primaryErr?.name || primaryErr?.message);
        const fallbackConstraints: MediaStreamConstraints = { video: { facingMode: 'user' }, audio: false };
        try {
          mediaStream = await navigator.mediaDevices.getUserMedia(fallbackConstraints);
          console.log('‚úÖ Fallback de constraints aplicado com sucesso');
        } catch (fallbackErr: any) {
          throw fallbackErr;
        }
      }
      
      if (!videoRef.current) {
        throw new Error('Elemento de v√≠deo n√£o encontrado');
      }
      
      // Configurar elemento de v√≠deo
      const video = videoRef.current;
      video.muted = true;
      video.playsInline = true;
      // iOS Safari: garantir atributo playsinline
      try { video.setAttribute('playsinline', 'true'); } catch {}
      video.srcObject = mediaStream;
      
      // Aguardar o v√≠deo ficar pronto com timeout e m√∫ltiplos eventos (Safari)
      await new Promise<void>((resolve, reject) => {
        const timeout = setTimeout(() => {
          video.removeEventListener('loadedmetadata', onLoadedMetadata);
          video.removeEventListener('canplay', onCanPlay);
          video.removeEventListener('loadeddata', onLoadedData);
          video.removeEventListener('error', onVideoError);
          reject(new Error('Timeout aguardando carregamento do v√≠deo'));
        }, STABILIZATION_TIMEOUT);
        
        const onLoadedMetadata = () => {
          clearTimeout(timeout);
          video.removeEventListener('loadedmetadata', onLoadedMetadata);
          video.removeEventListener('canplay', onCanPlay);
          video.removeEventListener('loadeddata', onLoadedData);
          video.removeEventListener('error', onVideoError);
          
          console.log(`üìπ Metadados carregados: ${video.videoWidth}x${video.videoHeight}, readyState: ${video.readyState}`);
          
          if (video.videoWidth > 0 && video.videoHeight > 0) {
            updateState({
              videoDimensions: {
                width: video.videoWidth,
                height: video.videoHeight
              }
            });
            console.log(`‚úÖ V√≠deo carregado com sucesso: ${video.videoWidth}x${video.videoHeight}`);
            resolve();
          } else {
            reject(new Error('Dimens√µes do v√≠deo inv√°lidas ap√≥s carregamento'));
          }
        };
        const onCanPlay = () => {
          if (video.videoWidth > 0 && video.videoHeight > 0) {
            console.log('üìπ Evento canplay recebido');
            onLoadedMetadata();
          }
        };
        const onLoadedData = () => {
          if (video.videoWidth > 0 && video.videoHeight > 0) {
            console.log('üìπ Evento loadeddata recebido');
            onLoadedMetadata();
          }
        };
        
        const onVideoError = () => {
          clearTimeout(timeout);
          video.removeEventListener('loadedmetadata', onLoadedMetadata);
          video.removeEventListener('canplay', onCanPlay);
          video.removeEventListener('loadeddata', onLoadedData);
          video.removeEventListener('error', onVideoError);
          reject(new Error('Erro ao carregar v√≠deo'));
        };
        
        video.addEventListener('loadedmetadata', onLoadedMetadata);
        video.addEventListener('canplay', onCanPlay);
        video.addEventListener('loadeddata', onLoadedData);
        video.addEventListener('error', onVideoError);
        
        video.play().catch((e) => {
          console.warn('‚ö†Ô∏è video.play() falhou, tentando chamado dentro de setTimeout (iOS Safari workaround)', e);
          setTimeout(() => {
            video.play().then(() => console.log('‚ñ∂Ô∏è video.play() sucesso ap√≥s retry')).catch(reject);
          }, 50);
        });
      });
      
      // Atualizar estados
      updateState({
        stream: mediaStream,
        isActive: true,
        faceDetected: false,
        faceCount: 0
      });
      
      console.log('‚úÖ C√¢mera iniciada com sucesso');
      
      // Aguardar estabiliza√ß√£o do v√≠deo
      await waitForVideoStabilization(video, mediaStream);
      
    } catch (err: any) {
      const errorMessage = getErrorMessage(err);
      console.error('‚ùå Erro ao iniciar c√¢mera:', err);
      
      updateState({
        error: errorMessage,
        isActive: false,
        stream: null,
        videoDimensions: { width: 0, height: 0 }
      });
      
      onError?.(errorMessage);
    } finally {
      updateState({ isInitializingFaceAPI: false });
    }
  }, [state.stream, updateState, onError, getErrorMessage, waitForVideoStabilization]);

  // Parar c√¢mera com limpeza adequada de recursos
  const stopCamera = useCallback(() => {
    try {
      console.log('‚èπÔ∏è Parando c√¢mera...');
      
      if (state.stream) {
        // Parar todas as tracks do stream
        state.stream.getTracks().forEach(track => {
          track.stop();
          console.log(`üõë Track ${track.kind} parada`);
        });
      }
      
      // Limpar elemento de v√≠deo
      if (videoRef.current) {
        videoRef.current.srcObject = null;
        videoRef.current.load();
      }
      
      // Resetar estados
      updateState({
        stream: null,
        isActive: false,
        faceDetected: false,
        faceCount: 0,
        videoDimensions: { width: 0, height: 0 },
        error: null
      });
      
      console.log('‚úÖ C√¢mera parada com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao parar c√¢mera:', error);
    }
  }, [state.stream, updateState]);

  // Cleanup ao desmontar componente
  useEffect(() => {
    return () => {
      stopCamera();
    };
  }, [stopCamera]);

  // Auto start camera se habilitado
  useEffect(() => {
    if (autoStart) {
      const timer = setTimeout(() => {
        startCamera();
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [autoStart, startCamera]);

  // Atualizar erro se houver problema na inicializa√ß√£o do Face API
  useEffect(() => {
    if (faceAPIError) {
      updateState({ error: `Erro no Face API: ${faceAPIError}` });
    }
  }, [faceAPIError, updateState]);

  // Detec√ß√£o facial otimizada
  const detectFaces = useCallback(async () => {
    if (!enableFaceDetection || !state.isActive || !videoRef.current || !faceAPIReady) {
      return;
    }

    try {
      const video = videoRef.current;
      
      // Verificar se o v√≠deo est√° pronto
      if (video.readyState < 2 || video.videoWidth === 0 || video.videoHeight === 0) {
        return;
      }

      // Verificar se o Face API est√° dispon√≠vel
      if (!faceRecognition) {
        console.warn('‚ö†Ô∏è Face recognition n√£o dispon√≠vel');
        return;
      }

      const faces = await faceRecognition.detectFaces(video);
      const detectedCount = faces.length;
      
      if (detectedCount > 0) {
        console.log(`üë§ ${detectedCount} face(s) detectada(s)`);
      }
      
      updateState({
        faceCount: detectedCount,
        faceDetected: detectedCount > 0
      });
      
      onFaceDetected?.(detectedCount);
      
    } catch (error) {
      console.error('‚ùå Erro na detec√ß√£o de faces:', error);
    }
  }, [enableFaceDetection, state.isActive, faceAPIReady, updateState, onFaceDetected]);

  // Efeito para detec√ß√£o facial em tempo real
  useEffect(() => {
    if (!enableFaceDetection || !state.isActive || !faceAPIReady) {
      return;
    }

    const initialDelay = setTimeout(() => {
      const interval = setInterval(detectFaces, DETECTION_INTERVAL);
      return () => clearInterval(interval);
    }, 2000);

    return () => clearTimeout(initialDelay);
  }, [enableFaceDetection, state.isActive, faceAPIReady, detectFaces]);

  // Fun√ß√£o de captura otimizada
  const captureImage = useCallback(async (): Promise<string | null> => {
    if (!videoRef.current || !canvasRef.current || !state.isActive) {
      console.error('‚ùå Elementos necess√°rios n√£o dispon√≠veis para captura');
      return null;
    }

    try {
      setIsCapturing(true);
      const video = videoRef.current;
      const canvas = canvasRef.current;
      const context = canvas.getContext('2d');

      if (!context) {
        throw new Error('Contexto do canvas n√£o dispon√≠vel');
      }

      // Verificar se o v√≠deo est√° pronto
      if (video.readyState < 2 || video.videoWidth === 0 || video.videoHeight === 0) {
        throw new Error('V√≠deo n√£o est√° pronto para captura');
      }

      // Configurar dimens√µes do canvas
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;

      // Capturar frame do v√≠deo
      context.drawImage(video, 0, 0, canvas.width, canvas.height);

      // Converter para base64
      const imageData = canvas.toDataURL('image/jpeg', 0.8);
      console.log('‚úÖ Imagem capturada com sucesso');
      return imageData;

    } catch (error) {
      console.error('‚ùå Erro ao capturar imagem:', error);
      const errorMessage = `Erro ao capturar imagem: ${error instanceof Error ? error.message : 'Erro desconhecido'}`;
      updateState({ error: errorMessage });
      onError?.(errorMessage);
      return null;
    } finally {
      setIsCapturing(false);
    }
  }, [state.isActive, onError, updateState]);

  // Verificar se o v√≠deo est√° pronto para captura
  const isVideoReady = useCallback(() => {
    if (!videoRef.current || !state.isActive) return false;
    
    const video = videoRef.current;
    return (
      video.readyState >= 2 && // HAVE_CURRENT_DATA
      video.videoWidth > 0 && 
      video.videoHeight > 0 &&
      state.stream?.active === true
    );
  }, [state.isActive, state.stream]);

  // Status consolidado para o componente
  const status = useMemo(() => ({
    isReady: isVideoReady(),
    hasError: !!state.error,
    isInitializing: state.isInitializingFaceAPI || faceAPILoading,
    canCapture: isVideoReady() && !isCapturing,
    faceStatus: {
      detected: state.faceDetected,
      count: state.faceCount,
      required: requireFace
    }
  }), [isVideoReady, state.error, state.isInitializingFaceAPI, faceAPILoading, isCapturing, state.faceDetected, state.faceCount, requireFace]);

  // Capturar foto otimizada com gate de captura
  const capturePhoto = useCallback(async () => {
    // Gate de captura: s√≥ permitir se o v√≠deo estiver pronto
    if (!status.canCapture) {
      const errorMessage = 'V√≠deo ainda n√£o est√° pronto. Aguarde alguns segundos e tente novamente.';
      updateState({ error: errorMessage });
      onError?.(errorMessage);
      return;
    }

    if (!videoRef.current || !canvasRef.current || !state.isActive) {
      onError?.('C√¢mera n√£o est√° ativa. Ative a c√¢mera primeiro.');
      return;
    }

    try {
      setIsCapturing(true);
      console.log('üì∏ Iniciando captura de foto...');
      
      const video = videoRef.current;
      const canvas = canvasRef.current;
      const ctx = canvas.getContext('2d');
      
      // Verificar se o contexto foi obtido
      if (!ctx) {
        throw new Error('N√£o foi poss√≠vel obter contexto do canvas');
      }
      
      console.log(`üì∏ Capturando frame: ${video.videoWidth}x${video.videoHeight}`);

      // Configurar canvas com dimens√µes corretas do v√≠deo
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

      // Obter ImageData para processamento
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);

      // Processar embedding facial se habilitado
      let faceEmbedding: any;
      if (enableFaceDetection && faceAPIReady) {
        try {
          console.log('üß† Processando embedding facial...');
          const extractedEmbedding = await faceRecognition.extractFaceEmbedding(video);
          if (extractedEmbedding) {
            faceEmbedding = extractedEmbedding;
            console.log('‚úÖ Embedding facial extra√≠do com sucesso');
          }
        } catch (error) {
          console.error('‚ùå Erro ao extrair embedding facial:', error);
        }
      }

      // Converter para blob com alta qualidade
      canvas.toBlob((blob) => {
        if (blob && onPhotoCapture) {
          console.log('üì∏ Foto capturada com sucesso, tamanho:', blob.size, 'bytes');
          onPhotoCapture(blob, imageData, faceEmbedding);
        }
      }, 'image/jpeg', 0.9);

    } catch (err: any) {
      const errorMessage = `Erro ao capturar foto: ${err.message}`;
      console.error('‚ùå Erro na captura:', err);
      updateState({ error: errorMessage });
      onError?.(errorMessage);
    } finally {
      setIsCapturing(false);
    }
  }, [status.canCapture, state.isActive, enableFaceDetection, faceAPIReady, onPhotoCapture, onError, updateState]);

  return (
    <div className={`bg-white rounded-2xl shadow-xl p-6 ${className}`}>
      <div className="text-center mb-4">
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          üì∏ Captura Facial
        </h3>
        <p className="text-sm text-gray-600">
          {status.isReady 
            ? status.faceStatus.detected 
              ? '‚úÖ Rosto detectado! Clique em Capturar Foto'
              : 'Posicione seu rosto no centro da tela'
            : 'Clique para ativar a c√¢mera'
          }
        </p>
      </div>

      {/* √Årea de v√≠deo */}
      {showPreview && (
        <div className="relative mb-4">
          <div className="aspect-video bg-gray-100 rounded-lg overflow-hidden relative">
            {state.isActive ? (
              <>
                <video
                  ref={videoRef}
                  className="w-full h-full object-cover"
                  playsInline
                  muted
                  autoPlay
                />
                
                {/* Overlay de guia facial responsivo */}
                <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                  <div className={`w-32 h-32 sm:w-40 sm:h-40 md:w-48 md:h-48 border-2 rounded-full opacity-50 transition-all duration-300 ${
                    enableFaceDetection 
                      ? status.faceStatus.detected 
                        ? 'border-green-500 scale-110' 
                        : 'border-red-500'
                      : 'border-blue-500'
                  }`}></div>
                </div>
                
                {/* Indicadores de status facial */}
                {enableFaceDetection && (
                  <div className="absolute top-2 left-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs">
                    {status.isInitializing ? (
                      'üîÑ Inicializando...'
                    ) : status.faceStatus.detected ? (
                      `‚úÖ ${status.faceStatus.count} face${status.faceStatus.count !== 1 ? 's' : ''} detectada${status.faceStatus.count !== 1 ? 's' : ''}`
                    ) : (
                      '‚ùå Nenhuma face detectada'
                    )}
                  </div>
                )}
                
                {/* Indicador de captura */}
                {isCapturing && (
                  <div className="absolute inset-0 bg-white bg-opacity-80 flex items-center justify-center">
                    <div className="text-center">
                      <div className="text-4xl mb-2 animate-pulse">üì∏</div>
                      <p className="text-sm text-gray-700">Capturando...</p>
                    </div>
                  </div>
                )}
                
                {/* Indicador de inicializa√ß√£o */}
                {status.isInitializing && (
                  <div className="absolute inset-0 bg-blue-50 bg-opacity-80 flex items-center justify-center">
                    <div className="text-center">
                      <div className="text-4xl mb-2 animate-spin">üîÑ</div>
                      <p className="text-sm text-blue-700">Inicializando c√¢mera...</p>
                    </div>
                  </div>
                )}
              </>
            ) : (
              <div className="w-full h-full flex items-center justify-center text-gray-400">
                <div className="text-center">
                  <div className="text-6xl mb-2">üì∑</div>
                  <p className="text-sm">C√¢mera desativada</p>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Mensagem de erro - apenas se n√£o houver onError callback */}
      {status.hasError && !onError && (
        <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
          <p className="text-sm text-red-600">‚ö†Ô∏è {state.error}</p>
          {state.error?.includes('Face API') && (
            <div className="mt-2 text-xs text-red-500">
              üí° Dica: Tente recarregar a p√°gina ou verificar sua conex√£o
            </div>
          )}
        </div>
      )}

      {/* Controles responsivos */}
      <div className="flex flex-col sm:flex-row gap-3 justify-center">
        {!state.isActive ? (
          <button
            onClick={startCamera}
            disabled={status.isInitializing}
            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium w-full sm:w-auto disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {status.isInitializing ? 'üîÑ Inicializando...' : 'üé• Ativar C√¢mera'}
          </button>
        ) : (
          <>
            <button
              onClick={capturePhoto}
              disabled={!status.canCapture || (requireFace && !status.faceStatus.detected)}
              className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed w-full sm:w-auto"
            >
              {isCapturing ? 'üì∏ Capturando...' : 'üì∏ Capturar Foto'}
            </button>
            
            <button
              onClick={stopCamera}
              className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors font-medium w-full sm:w-auto"
            >
              ‚èπÔ∏è Parar
            </button>
          </>
        )}
      </div>

      {/* Canvas oculto para captura */}
      <canvas
        ref={canvasRef}
        className="hidden"
      />

      {/* Informa√ß√µes t√©cnicas melhoradas */}
      {state.isActive && (
        <div className="mt-4 text-xs text-gray-500 text-center space-y-1">
          <p>Resolu√ß√£o: {state.videoDimensions.width}x{state.videoDimensions.height}</p>
          <p>Status: {state.stream?.active ? 'üü¢ Ativo' : 'üî¥ Inativo'}</p>
          {enableFaceDetection && (
            <p>Face API: {faceAPIReady ? '‚úÖ Pronto' : 'üîÑ Inicializando'}</p>
          )}
        </div>
      )}
    </div>
  );
}

// Tipos para exporta√ß√£o
export type { CameraPanelProps };